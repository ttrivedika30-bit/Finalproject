/**
 * Â© Copyright IBM Corporation 2025. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { default as CloudantV1, Response } from '../../v1';
import { PageIterator } from './pageIterator';
export declare abstract class BasePageIterator<P extends CloudantV1.PostAllDocsParams | CloudantV1.PostPartitionAllDocsParams | CloudantV1.PostDesignDocsParams | CloudantV1.PostFindParams | CloudantV1.PostPartitionFindParams | CloudantV1.PostSearchParams | CloudantV1.PostPartitionSearchParams | CloudantV1.PostViewParams | CloudantV1.PostPartitionViewParams, R extends CloudantV1.AllDocsResult | CloudantV1.FindResult | CloudantV1.SearchResult | CloudantV1.ViewResult, I extends CloudantV1.DocsResultRow | CloudantV1.Document | CloudantV1.SearchResultRow | CloudantV1.ViewResultRow> implements PageIterator<I> {
    protected client: CloudantV1;
    protected pageSize: number;
    protected _hasNext: boolean;
    protected nextPageParams: P;
    protected static MAX_LIMIT: number;
    protected static MIN_LIMIT: number;
    constructor(client: CloudantV1, params: P);
    next(...[value]: [] | [any]): Promise<IteratorResult<ReadonlyArray<I>, any>>;
    protected nextRequest(): Promise<Array<I>>;
    protected abstract getItems(result: R): Array<I>;
    protected abstract setNextPageParams(result: R): void;
    protected abstract nextRequestFunction(): (params: P) => Promise<Response<R>>;
    protected getLimit(params: P): number;
    protected getPageSize(params: any): number;
    [Symbol.asyncIterator](): AsyncIterableIterator<ReadonlyArray<I>>;
    hasNext(): boolean;
    protected validate(params: P): void;
    protected validateParamsAbsent(params: P, paramNames: Array<string>): void;
    protected getValidateParamsAbsentErrorMessage(paramName: any): string;
    private validateLimit;
}
